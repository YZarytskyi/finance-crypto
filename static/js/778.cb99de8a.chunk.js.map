{"version":3,"file":"static/js/778.cb99de8a.chunk.js","mappings":"mPACA,EAA4B,4BAA5B,EAAoE,4BAApE,EAA+G,+BAA/G,EAAuU,2BAAvU,EAA4W,0BAA5W,EAAgZ,0BAAhZ,EAAkb,wBAAlb,EAAyd,+BAAzd,EAA2gB,mCAA3gB,EAA2jB,6BAA3jB,EAAqmB,6BAArmB,EAA8oB,4B,SCOxoBA,EAASC,EAAAA,GAAW,CACxBC,SAAUD,EAAAA,KAAaE,SAAS,iCAChCC,MAAOH,EAAAA,KAEJG,MAAM,wBACND,SAAS,iCACZE,QAASJ,EAAAA,KAAaE,SAAS,mCASpBG,EAAe,WAAO,IAAD,UAChC,GAAkCC,EAAAA,EAAAA,WAAkB,GAApD,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAIIC,EAAAA,EAAAA,IAAqB,CAAEC,UAAUC,EAAAA,EAAAA,GAAYZ,KAH/Ca,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAIf,OACE,kBACEE,SAAUH,GAJG,SAACI,GAAD,OAAuBT,GAAa,EAApC,IAKbU,UAAWC,EACXC,aAAa,MAHf,WAKE,mBAAOF,UAAWC,EAAlB,uBAEE,oCACMP,EAAS,aADf,IAEEM,UAAWC,EACXE,YAAY,yBAEd,cAAGH,UAAWC,EAAd,SACG,UAAAL,EAAOb,gBAAP,SAAiBG,QAAjB,UAA2BU,EAAOb,gBAAlC,aAA2B,EAAiBG,QAAU,UAG3D,mBAAOc,UAAWC,EAAlB,mBAEE,oCACMP,EAAS,UADf,IAEEM,UAAWC,EACXE,YAAY,0BAEd,cAAGH,UAAWC,EAAd,SACG,UAAAL,EAAOX,aAAP,SAAcC,QAAd,UAAwBU,EAAOX,aAA/B,aAAwB,EAAcC,QAAU,UAGrD,mBAAOc,UAAWC,EAAlB,qBAEE,uCACMP,EAAS,YADf,IAEEM,UAAWC,EACXE,YAAY,4BAEd,cAAGH,UAAWC,EAAd,SACG,UAAAL,EAAOV,eAAP,SAAgBA,QAAUU,EAAOV,QAAQA,QAAU,UAGxD,SAAC,IAAD,CAAYkB,KAAK,SAASC,QAAQ,WAAWL,UAAWC,EAAxD,mBAGA,UAAC,KAAD,CAAOZ,UAAWA,EAAWC,aAAcA,EAA3C,WACE,eAAIU,UAAWC,EAAf,8CACA,cAAGD,UAAWC,EAAd,2IAOP,ECpED,EAZiB,WACf,OACE,qBAASD,UAAWC,EAApB,WACE,eAAID,UAAWC,EAAf,6BACA,iBAAKD,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,KAChB,SAACd,EAAD,SAIP,C","sources":["webpack://crypto-project/./src/pages/Contacts/Contacts.module.scss?47b9","pages/Contacts/ContactsForm.tsx","pages/Contacts/Contacts.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formLabel\":\"Contacts_formLabel__zd2AD\",\"formInput\":\"Contacts_formInput__kkGdr\",\"formTextarea\":\"Contacts_formTextarea__27Rkc\",\"iconTime\":\"Contacts_iconTime__f0k2g\",\"hidden\":\"Contacts_hidden__wAWbz\",\"percentagePlus\":\"Contacts_percentagePlus__PQ5hk\",\"percentageMinus\":\"Contacts_percentageMinus__l3ucZ\",\"contacts\":\"Contacts_contacts__4qNg2\",\"heading\":\"Contacts_heading__K6ec1\",\"formImg\":\"Contacts_formImg__9W5jJ\",\"image\":\"Contacts_image__FEKOk\",\"contactsForm\":\"Contacts_contactsForm__Nq5rR\",\"formErrorMessage\":\"Contacts_formErrorMessage__wOPDB\",\"formButton\":\"Contacts_formButton__Iqalt\",\"modalTitle\":\"Contacts_modalTitle__oOJxk\",\"modalText\":\"Contacts_modalText__Eek9P\"};","import { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport SendButton from \"@mui/material/Button\";\r\nimport { Modal } from \"Components/Common\";\r\nimport style from \"./Contacts.module.scss\";\r\n\r\nconst schema = yup.object({\r\n  fullName: yup.string().required(\"⚠ This field is required\"),\r\n  email: yup\r\n    .string()\r\n    .email(\"⚠ Invalid email\")\r\n    .required(\"⚠ This field is required\"),\r\n  message: yup.string().required(\"⚠ This field is required\"),\r\n});\r\n\r\ninterface IFormInputs {\r\n  fullName: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nexport const ContactsForm = () => {\r\n  const [modalShow, setModalShow] = useState<boolean>(false);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<IFormInputs>({ resolver: yupResolver(schema) });\r\n  const onSubmit = (data: IFormInputs) => setModalShow(true);\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit(onSubmit)}\r\n      className={style.contactsForm}\r\n      autoComplete=\"off\"\r\n    >\r\n      <label className={style.formLabel}>\r\n        Full Name\r\n        <input\r\n          {...register(\"fullName\")}\r\n          className={style.formInput}\r\n          placeholder=\"Enter your name...\"\r\n        />\r\n        <p className={style.formErrorMessage}>\r\n          {errors.fullName?.message ? errors.fullName?.message : \" \"}\r\n        </p>\r\n      </label>\r\n      <label className={style.formLabel}>\r\n        Email\r\n        <input\r\n          {...register(\"email\")}\r\n          className={style.formInput}\r\n          placeholder=\"Enter your email...\"\r\n        />\r\n        <p className={style.formErrorMessage}>\r\n          {errors.email?.message ? errors.email?.message : \" \"}\r\n        </p>\r\n      </label>\r\n      <label className={style.formLabel}>\r\n        Message\r\n        <textarea\r\n          {...register(\"message\")}\r\n          className={style.formTextarea}\r\n          placeholder=\"Enter your message...\"\r\n        />\r\n        <p className={style.formErrorMessage}>\r\n          {errors.message?.message ? errors.message.message : \" \"}\r\n        </p>\r\n      </label>\r\n      <SendButton type=\"submit\" variant=\"outlined\" className={style.formButton}>\r\n        Send\r\n      </SendButton>\r\n      <Modal modalShow={modalShow} setModalShow={setModalShow}>\r\n        <h1 className={style.modalTitle}>Thank you for getting in touch!</h1>\r\n        <p className={style.modalText}>\r\n          We have received your message and would like to thank you for writing\r\n          to us. We will reply by email as soon as possible.\r\n        </p>\r\n      </Modal>\r\n    </form>\r\n  );\r\n};\r\n","import { ContactsForm } from './ContactsForm';\r\nimport style from './Contacts.module.scss';\r\n\r\nconst Contacts = () => {\r\n  return (\r\n    <section className={style.contacts}>\r\n      <h1 className={style.heading}>Any questions?</h1>\r\n      <div className={style.formImg}>\r\n        <div className={style.image}></div>\r\n        <ContactsForm />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n"],"names":["schema","yup","fullName","required","email","message","ContactsForm","useState","modalShow","setModalShow","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","onSubmit","data","className","style","autoComplete","placeholder","type","variant"],"sourceRoot":""}