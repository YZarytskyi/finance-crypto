{"version":3,"file":"static/js/914.1177b165.chunk.js","mappings":"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","sources":["webpack://crypto-project/./src/Components/Crypto/Converter/Converter.module.scss?ed5b","Components/Crypto/Converter/LastUpdateTimer.tsx","Components/Crypto/Converter/Converter.tsx","webpack://crypto-project/./src/Components/Crypto/NavCrypto.module.scss?f0af","Components/Crypto/NavCrypto.tsx","utils/utils.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"converterInside\":\"Converter_converterInside__HXnyE\",\"converterInput\":\"Converter_converterInput__mqEWt\",\"iconTime\":\"Converter_iconTime__ULezP\",\"hidden\":\"Converter_hidden__EEqxQ\",\"percentagePlus\":\"Converter_percentagePlus__CsJRM\",\"percentageMinus\":\"Converter_percentageMinus__ZtKU+\",\"hero\":\"Converter_hero__9P5HA\",\"heroInside\":\"Converter_heroInside__sxV5A\",\"converter\":\"Converter_converter__rqYfb\",\"autocomplete\":\"Converter_autocomplete__W5LfP\",\"converterText\":\"Converter_converterText__Od9OX\",\"converterInputWrapper\":\"Converter_converterInputWrapper__JSSxj\",\"lastUpdateContainer\":\"Converter_lastUpdateContainer__LK6m5\",\"refreshIcon\":\"Converter_refreshIcon__J30BA\",\"lastUpdateText\":\"Converter_lastUpdateText__jvRni\"};","import { useEffect, useState } from \"react\";\r\nimport style from \"./Converter.module.scss\";\r\nimport { Autocomplete } from \"./Converter\";\r\nimport sprite from \"../../../assets/images/icons.svg\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../Store/hooks\";\r\nimport { fetchPrice, removePrice } from \"../../../Store/Reducers/converterSlice\";\r\n\r\ninterface LastUpdateTimerProps {\r\n  coin: Autocomplete;\r\n}\r\n\r\nconst LastUpdateTimer = ({ coin }: LastUpdateTimerProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const price = useAppSelector((state) => state.converter.price);\r\n  const [updateCount, setUpdateCount] = useState<number>(0);\r\n  const [timerChange, setTimerChange] = useState<number>(1000);\r\n\r\n  let timer: any = null;\r\n\r\n  useEffect(() => {\r\n    clearInterval(timer);\r\n    if (!price) {\r\n      return\r\n    }\r\n    timer = setTimeout(() => {\r\n      setUpdateCount((prev) => prev + 1);\r\n      if (updateCount === 59) {\r\n        setUpdateCount(1);\r\n        setTimerChange(60000);\r\n      }\r\n    }, timerChange);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [updateCount, price])\r\n\r\n  useEffect(() => {\r\n    setUpdateCount(0);\r\n    setTimerChange(1000);\r\n  }, [coin]);\r\n\r\n  function handleUpdate() {\r\n    dispatch(removePrice())\r\n    dispatch(fetchPrice(coin.pair));\r\n    setUpdateCount(0);\r\n    setTimerChange(1000);\r\n  }\r\n\r\n  return (\r\n    <div className={style.lastUpdateContainer}>\r\n      <p className={style.lastUpdateText}>\r\n        Last price update:{\" \"}\r\n        <span>\r\n          {updateCount}\r\n          {timerChange === 1000 ? \"s\" : \"m\"}\r\n        </span>{\" \"}\r\n        ago\r\n      </p>\r\n      <svg\r\n        className={style.refreshIcon}\r\n        role=\"button\"\r\n        onClick={() => handleUpdate()}\r\n      >\r\n        <use href={sprite + \"#refresh\"} />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LastUpdateTimer;\r\n","import style from \"./Converter.module.scss\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../Store/hooks\";\r\nimport NavCrypto from \"../NavCrypto\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  fetchCoinsList,\r\n  fetchPrice,\r\n  removePrice,\r\n} from \"../../../Store/Reducers/converterSlice\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport Spinner from \"../../Common/Spinner\";\r\nimport LastUpdateTimer from \"./LastUpdateTimer\";\r\nimport { numberToFixed2 } from \"../../../utils/utils\";\r\n\r\n\r\nexport interface Autocomplete {\r\n  firstLetter: string;\r\n  pair: string;\r\n}\r\n\r\nconst Converter = () => {\r\n\r\n  const { coinsList, price, isLoadingConverter } = useAppSelector(\r\n    (state) => state.converter\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [coin, setCoin] = useState<Autocomplete>({\r\n    firstLetter: \"B\",\r\n    pair: \"BTCUSDT\",\r\n  });\r\n  const [value, setValue] = useState<number | \"\">(1);\r\n  const [convertedValue, setConvertedValue] = useState<number | \"\">(\"\");\r\n\r\n\r\n  useEffect(() => {\r\n    if (!coinsList.length) {\r\n      dispatch(fetchCoinsList());\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setValue(1);\r\n    setConvertedValue(\"\")\r\n    dispatch(fetchPrice(coin.pair));\r\n    \r\n    return () => {\r\n      dispatch(removePrice())\r\n    }\r\n  }, [coin.pair]);\r\n\r\n  useEffect(() => {\r\n    if(!value) {\r\n      setValue(1);\r\n    }\r\n    setConvertedValue(price && value ? price * value : \"\");\r\n    return () => setConvertedValue(\"\");\r\n  }, [price]);\r\n\r\n\r\n  const handleChangeCoin = (\r\n    event: React.SyntheticEvent,\r\n    newCoin: Autocomplete | null\r\n  ): void => {\r\n    if (newCoin) {\r\n      setCoin({ firstLetter: newCoin.firstLetter, pair: newCoin.pair });\r\n    }\r\n  };\r\n\r\n  const handleChangeValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (e.currentTarget.value) {\r\n      setValue(Number(e.currentTarget.value))\r\n      setConvertedValue(\r\n        numberToFixed2(Number(e.currentTarget.value) * (price || 0))\r\n      );\r\n    } else {\r\n      setValue(\"\")\r\n      setConvertedValue(\"\");\r\n    }\r\n  };\r\n\r\n  const handleChangeConvertedValue = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setConvertedValue(\r\n      Number(e.currentTarget.value) || \"\"\r\n    );\r\n    if (e.currentTarget.value) {\r\n      setValue(numberToFixed2(Number(e.currentTarget.value) / (price as number)));\r\n    } else {\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  const options = coinsList.map((pair) => {\r\n    const firstLetter = pair[0].toUpperCase();\r\n    return {\r\n      firstLetter: firstLetter,\r\n      pair,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <NavCrypto />\r\n      <section>\r\n        <div className={style.hero}>\r\n          <h1 className={style.heroInside}>Cryptocurrency Converter</h1>\r\n        </div>\r\n        <div className={style.converter}>\r\n          <div className={style.converterInside}>\r\n            <Autocomplete\r\n              id=\"coinsList\"\r\n              className={style.autocomplete}\r\n              value={coin}\r\n              onChange={handleChangeCoin}\r\n              options={options.sort(\r\n                (a, b) => a.firstLetter.localeCompare(b.firstLetter)\r\n              )}\r\n              groupBy={(coin) => coin.firstLetter}\r\n              getOptionLabel={(coin) => coin.pair.replace(/USDT/, \"\")}\r\n              renderInput={(params) => <TextField {...params} label=\"Coin\" />}\r\n            />\r\n\r\n            <input\r\n              type=\"number\"\r\n              className={style.converterInput}\r\n              value={value}\r\n              disabled={!price}\r\n              onChange={handleChangeValue}\r\n            />\r\n\r\n            <p className={style.converterText}>Convert to USDT</p>\r\n\r\n            <div className={style.converterInputWrapper}>\r\n              <input\r\n                type=\"number\"\r\n                className={style.converterInput}\r\n                value={convertedValue}\r\n                disabled={!price}\r\n                onChange={handleChangeConvertedValue}\r\n              />\r\n              {isLoadingConverter && <Spinner className={'spinnerConverter'} />}\r\n            </div>\r\n            <LastUpdateTimer coin={coin} />\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Converter;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"iconTime\":\"NavCrypto_iconTime__I4Vhv\",\"hidden\":\"NavCrypto_hidden__tN0cv\",\"percentagePlus\":\"NavCrypto_percentagePlus__eSklH\",\"percentageMinus\":\"NavCrypto_percentageMinus__1qsQk\",\"container\":\"NavCrypto_container__Wd1RQ\",\"navCrypto\":\"NavCrypto_navCrypto__C9pNy\",\"listLeft\":\"NavCrypto_listLeft__NSkYO\",\"leftLink\":\"NavCrypto_leftLink__Y2MD1\",\"arrow\":\"NavCrypto_arrow__v0AAw\",\"home\":\"NavCrypto_home__deF99\",\"currentPath\":\"NavCrypto_currentPath__sTRX4\",\"listCenter\":\"NavCrypto_listCenter__bfrWA\"};","import style from \"./NavCrypto.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport sprite from \"../../assets/images/icons.svg\";\r\n\r\nconst NavCrypto = () => {\r\n  let currentPath = window.location.hash;\r\n  const regexpCoins = /#\\/crypto\\//i;\r\n  const regexpSelectedCoin = /#\\/crypto\\/coins\\//i;\r\n  const isSelectedCoin = regexpSelectedCoin.test(currentPath);\r\n  currentPath = currentPath.replace(\r\n    isSelectedCoin ? regexpSelectedCoin : regexpCoins,\r\n    \"\"\r\n  );\r\n  currentPath = isSelectedCoin\r\n    ? currentPath.substring(0, 17) + (currentPath.length > 18 ? \"...\" : \"\")\r\n    : currentPath;\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <div className={style.navCrypto}>\r\n        <ul className={style.listLeft}>\r\n          <li>\r\n            <NavLink to=\"/\" className={style.leftLink}>\r\n              <svg className={style.home}>\r\n                <use href={sprite + \"#home\"} />\r\n              </svg>\r\n              <svg className={style.arrow}>\r\n                <use href={sprite + \"#arrow_right\"} />\r\n              </svg>\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/crypto/coins\" className={style.leftLink}>\r\n              Crypto\r\n              <svg className={style.arrow}>\r\n                <use href={sprite + \"#arrow_right\"} />\r\n              </svg>\r\n            </NavLink>\r\n          </li>\r\n          <li className={isSelectedCoin ? \"\" : style.hidden}>\r\n            <NavLink to=\"/crypto/coins\" className={style.leftLink}>\r\n              Coins\r\n              <svg className={style.arrow}>\r\n                <use href={sprite + \"#arrow_right\"} />\r\n              </svg>\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <span className={style.currentPath}>{currentPath}</span>\r\n          </li>\r\n        </ul>\r\n        <ul className={style.listCenter}>\r\n          <li>\r\n            <NavLink to=\"/crypto/coins\" className={style.centerLink}>\r\n              Coins\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/crypto/exchanges\" className={style.centerLink}>\r\n              Exchanges\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/crypto/arbitrage\" className={style.centerLink}>\r\n              Arbitrage\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/crypto/converter\" className={style.centerLink}>\r\n              Converter\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavCrypto;\r\n","export const setNumberFormat = (number: number): string => new Intl.NumberFormat(\"ua-UA\").format(number);\r\n\r\nexport const removeFloatNull = (value: number): string => {\r\n  const regExp = new RegExp(/\\.?0*$/);\r\n  return value < 1000 ? String(value).replace(regExp, \"\") : setNumberFormat(value);\r\n};\r\n\r\nexport const numberToFixed2 = (number: number): number => {\r\n  if (number < 0.00000001) {\r\n    return (Math.trunc(number * 10000000000)) / 10000000000;\r\n  } else if (number < 0.000001) {\r\n    return (Math.trunc(number * 100000000)) / 100000000;\r\n  } else if (number < 0.0001) {\r\n    return (Math.trunc(number * 1000000)) / 1000000;\r\n  } else if (number < 0.01) {\r\n    return (Math.trunc(number * 10000)) / 10000;\r\n  }\r\n  return ((Math.trunc(number * 100)) / 100)\r\n}\r\n\r\nexport const setClassNamePlusOrMinus = (value: number) => {\r\n  return value > 0 ? 'percentagePlus' : 'percentageMinus';\r\n}"],"names":["coin","dispatch","useAppDispatch","price","useAppSelector","state","converter","useState","updateCount","setUpdateCount","timerChange","setTimerChange","timer","useEffect","clearInterval","setTimeout","prev","className","style","role","onClick","removePrice","fetchPrice","pair","href","sprite","coinsList","isLoadingConverter","firstLetter","setCoin","value","setValue","convertedValue","setConvertedValue","length","fetchCoinsList","options","map","toUpperCase","NavCrypto","Autocomplete","id","onChange","event","newCoin","sort","a","b","localeCompare","groupBy","getOptionLabel","replace","renderInput","params","TextField","label","type","disabled","e","currentTarget","Number","numberToFixed2","Spinner","currentPath","window","location","hash","regexpSelectedCoin","isSelectedCoin","test","substring","to","setNumberFormat","number","Intl","NumberFormat","format","removeFloatNull","regExp","RegExp","String","Math","trunc","setClassNamePlusOrMinus"],"sourceRoot":""}