{"version":3,"file":"static/js/915.6779d69f.chunk.js","mappings":"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","sources":["webpack://crypto-project/./src/pages/Crypto/Converter/Converter.module.scss?2783","pages/Crypto/Converter/LastUpdateTimer.tsx","pages/Crypto/Converter/Converter.tsx","utils/utils.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"converterInside\":\"Converter_converterInside__kgtqp\",\"converterInput\":\"Converter_converterInput__+21MV\",\"iconTime\":\"Converter_iconTime__QvmhL\",\"hidden\":\"Converter_hidden__CTQ3k\",\"percentagePlus\":\"Converter_percentagePlus__M4VPO\",\"percentageMinus\":\"Converter_percentageMinus__dIFzf\",\"hero\":\"Converter_hero__V6f5t\",\"heroInside\":\"Converter_heroInside__XW2vL\",\"converter\":\"Converter_converter__TcsZy\",\"autocomplete\":\"Converter_autocomplete__+WU9s\",\"converterText\":\"Converter_converterText__T90eT\",\"converterInputWrapper\":\"Converter_converterInputWrapper__QERIU\",\"lastUpdateContainer\":\"Converter_lastUpdateContainer__eQn3x\",\"refreshIcon\":\"Converter_refreshIcon__sQfQc\",\"lastUpdateText\":\"Converter_lastUpdateText__SgDHO\"};","import { useEffect, useState } from 'react';\r\nimport { IAutocomplete } from './Converter';\r\nimport { useAppDispatch, useAppSelector } from 'hooks/redux-hooks';\r\nimport {\r\n  fetchPrice,\r\n  removePrice,\r\n} from 'Store/Reducers/converterSlice';\r\nimport sprite from 'assets/images/icons.svg';\r\nimport style from './Converter.module.scss';\r\n\r\ninterface LastUpdateTimerProps {\r\n  coin: IAutocomplete;\r\n}\r\n\r\nconst SECOND = 1000;\r\nconst MINUTE = 60000;\r\n\r\nexport const LastUpdateTimer = ({ coin }: LastUpdateTimerProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const price = useAppSelector(state => state.converter.price);\r\n  const [updateCount, setUpdateCount] = useState<number>(0);\r\n  const [timeInterval, setTimeInterval] = useState<1000 | 60000>(SECOND);\r\n\r\n  useEffect(() => {\r\n    let timer: any = null;\r\n\r\n    clearInterval(timer);\r\n    if (!price) {\r\n      return;\r\n    }\r\n    timer = setTimeout(() => {\r\n      setUpdateCount(prev => prev + 1);\r\n      if (updateCount === 59) {\r\n        setUpdateCount(1);\r\n        setTimeInterval(MINUTE);\r\n      }\r\n    }, timeInterval);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [updateCount, price]);\r\n\r\n  useEffect(() => {\r\n    setUpdateCount(0);\r\n    setTimeInterval(SECOND);\r\n  }, [coin]);\r\n\r\n  function handleUpdate() {\r\n    dispatch(removePrice());\r\n    dispatch(fetchPrice(coin.pair));\r\n    setUpdateCount(0);\r\n    setTimeInterval(SECOND);\r\n  }\r\n\r\n  return (\r\n    <div className={style.lastUpdateContainer}>\r\n      <p className={style.lastUpdateText}>\r\n        Last price update:{' '}\r\n        <span>\r\n          {updateCount}\r\n          {timeInterval === SECOND ? 's' : 'm'}\r\n        </span>{' '}\r\n        ago\r\n      </p>\r\n      <svg className={style.refreshIcon} role=\"button\" onClick={handleUpdate}>\r\n        <use href={sprite + '#refresh'} />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\nimport { useAppDispatch, useAppSelector } from 'hooks/redux-hooks';\r\nimport {\r\n  fetchCoinsList,\r\n  fetchPrice,\r\n  removePrice,\r\n} from 'Store/Reducers/converterSlice';\r\nimport { Spinner } from 'Components/Common';\r\nimport { LastUpdateTimer } from './LastUpdateTimer';\r\nimport { numberToFixed2 } from 'utils/utils';\r\nimport style from './Converter.module.scss';\r\n\r\nexport interface IAutocomplete {\r\n  firstLetter: string;\r\n  pair: string;\r\n}\r\n\r\nconst Converter = () => {\r\n  const { coinsList, price, isLoadingConverter } = useAppSelector(\r\n    state => state.converter\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [coin, setCoin] = useState<IAutocomplete>({\r\n    firstLetter: 'B',\r\n    pair: 'BTCUSDT',\r\n  });\r\n  const [value, setValue] = useState<number | ''>(1);\r\n  const [convertedValue, setConvertedValue] = useState<number | ''>('');\r\n\r\n  useEffect(() => {\r\n    if (!coinsList.length) {\r\n      dispatch(fetchCoinsList());\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setValue(1);\r\n    setConvertedValue('');\r\n    dispatch(fetchPrice(coin.pair));\r\n\r\n    return () => {\r\n      dispatch(removePrice());\r\n    };\r\n  }, [coin.pair]);\r\n\r\n  useEffect(() => {\r\n    if (!value) {\r\n      setValue(1);\r\n    }\r\n    setConvertedValue(price && value ? price * value : '');\r\n    return () => setConvertedValue('');\r\n  }, [price]);\r\n\r\n  const onChangeCoin = (\r\n    event: React.SyntheticEvent,\r\n    newCoin: IAutocomplete | null\r\n  ): void => {\r\n    if (newCoin) {\r\n      setCoin({ firstLetter: newCoin.firstLetter, pair: newCoin.pair });\r\n    }\r\n  };\r\n\r\n  const onChangeValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (e.currentTarget.value) {\r\n      setValue(Number(e.currentTarget.value));\r\n      setConvertedValue(\r\n        numberToFixed2(Number(e.currentTarget.value) * (price || 0))\r\n      );\r\n    } else {\r\n      setValue('');\r\n      setConvertedValue('');\r\n    }\r\n  };\r\n\r\n  const onChangeConvertedValue: React.ChangeEventHandler<\r\n    HTMLInputElement\r\n  > = e => {\r\n    setConvertedValue(Number(e.currentTarget.value) || '');\r\n    if (e.currentTarget.value) {\r\n      setValue(\r\n        numberToFixed2(Number(e.currentTarget.value) / (price as number))\r\n      );\r\n    } else {\r\n      setValue('');\r\n    }\r\n  };\r\n\r\n  const options = coinsList.map(pair => {\r\n    const firstLetter = pair[0].toUpperCase();\r\n    return {\r\n      firstLetter: firstLetter,\r\n      pair,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <section>\r\n      <div className={style.hero}>\r\n        <h1 className={style.heroInside}>Cryptocurrency Converter</h1>\r\n      </div>\r\n      <div className={style.converter}>\r\n        <div className={style.converterInside}>\r\n          <Autocomplete\r\n            id=\"coinsList\"\r\n            className={style.autocomplete}\r\n            value={coin}\r\n            onChange={onChangeCoin}\r\n            options={options.sort((a, b) =>\r\n              a.firstLetter.localeCompare(b.firstLetter)\r\n            )}\r\n            groupBy={coin => coin.firstLetter}\r\n            getOptionLabel={coin => coin.pair.replace(/USDT/, '')}\r\n            renderInput={params => <TextField {...params} label=\"Coin\" />}\r\n          />\r\n\r\n          <input\r\n            type=\"number\"\r\n            className={style.converterInput}\r\n            value={value}\r\n            disabled={!price}\r\n            onChange={onChangeValue}\r\n          />\r\n\r\n          <p className={style.converterText}>Convert to USDT</p>\r\n\r\n          <div className={style.converterInputWrapper}>\r\n            <input\r\n              type=\"number\"\r\n              className={style.converterInput}\r\n              value={convertedValue}\r\n              disabled={!price}\r\n              onChange={onChangeConvertedValue}\r\n            />\r\n            {isLoadingConverter && <Spinner className={'spinnerConverter'} />}\r\n          </div>\r\n          <LastUpdateTimer coin={coin} />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Converter;\r\n","export const setNumberFormat = (number: number): string => new Intl.NumberFormat(\"ua-UA\").format(number);\r\n\r\nexport const removeFloatNull = (value: number): string => {\r\n  const regExp = new RegExp(/\\.?0*$/);\r\n  return value < 1000 ? String(value).replace(regExp, \"\") : setNumberFormat(value);\r\n};\r\n\r\nexport const numberToFixed2 = (number: number): number => {\r\n  if (number < 0.00000001) {\r\n    return (Math.trunc(number * 10000000000)) / 10000000000;\r\n  } else if (number < 0.000001) {\r\n    return (Math.trunc(number * 100000000)) / 100000000;\r\n  } else if (number < 0.0001) {\r\n    return (Math.trunc(number * 1000000)) / 1000000;\r\n  } else if (number < 0.01) {\r\n    return (Math.trunc(number * 10000)) / 10000;\r\n  }\r\n  return ((Math.trunc(number * 100)) / 100)\r\n}\r\n\r\nexport const setClassNamePlusOrMinus = (value: number) => {\r\n  return value > 0 ? 'percentagePlus' : 'percentageMinus';\r\n}"],"names":["SECOND","LastUpdateTimer","coin","dispatch","useAppDispatch","price","useAppSelector","state","converter","useState","updateCount","setUpdateCount","timeInterval","setTimeInterval","useEffect","timer","clearInterval","setTimeout","prev","className","style","role","onClick","removePrice","fetchPrice","pair","href","sprite","coinsList","isLoadingConverter","firstLetter","setCoin","value","setValue","convertedValue","setConvertedValue","length","fetchCoinsList","options","map","toUpperCase","Autocomplete","id","onChange","event","newCoin","sort","a","b","localeCompare","groupBy","getOptionLabel","replace","renderInput","params","TextField","label","type","disabled","e","currentTarget","Number","numberToFixed2","setNumberFormat","number","Intl","NumberFormat","format","removeFloatNull","regExp","RegExp","String","Math","trunc","setClassNamePlusOrMinus"],"sourceRoot":""}