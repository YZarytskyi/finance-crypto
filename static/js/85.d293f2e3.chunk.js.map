{"version":3,"file":"static/js/85.d293f2e3.chunk.js","mappings":"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","sources":["webpack://crypto-project/./src/Components/Crypto/Converter/Converter.module.scss?ed5b","webpack://crypto-project/./src/Components/Common/Spinner.module.scss?6143","Components/Common/Spinner.js","Components/Crypto/Converter/LastUpdateTimer.tsx","Components/Crypto/Converter/Converter.tsx","webpack://crypto-project/./src/Components/Crypto/NavCrypto.module.scss?f0af","Components/Crypto/NavCrypto.tsx","utils/utils.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"converterInside\":\"Converter_converterInside__HXnyE\",\"converterInput\":\"Converter_converterInput__mqEWt\",\"iconTime\":\"Converter_iconTime__ULezP\",\"hidden\":\"Converter_hidden__EEqxQ\",\"hero\":\"Converter_hero__9P5HA\",\"heroInside\":\"Converter_heroInside__sxV5A\",\"converter\":\"Converter_converter__rqYfb\",\"autocomplete\":\"Converter_autocomplete__W5LfP\",\"converterText\":\"Converter_converterText__Od9OX\",\"converterInputWrapper\":\"Converter_converterInputWrapper__JSSxj\",\"lastUpdateContainer\":\"Converter_lastUpdateContainer__LK6m5\",\"refreshIcon\":\"Converter_refreshIcon__J30BA\",\"lastUpdateText\":\"Converter_lastUpdateText__jvRni\"};","// extracted by mini-css-extract-plugin\nexport default {\"spinner\":\"Spinner_spinner__H+S+8\"};","import style from \"./Spinner.module.scss\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <svg\r\n      className={style.spinner}\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      version=\"1.0\"\r\n      viewBox=\"0 0 128 128\"\r\n    >\r\n      <g>\r\n        <linearGradient id=\"a\">\r\n          <stop offset=\"0%\" />\r\n          <stop offset=\"100%\" stopColor=\"#0090fe\" />\r\n        </linearGradient>\r\n        <linearGradient id=\"b\">\r\n          <stop offset=\"0%\" />\r\n          <stop offset=\"100%\" stopColor=\"#90e6fe\" />\r\n        </linearGradient>\r\n        <path\r\n          d=\"M64 .98A63.02 63.02 0 1 1 .98 64 63.02 63.02 0 0 1 64 .98zm0 15.76A47.26 47.26 0 1 1 16.74 64 47.26 47.26 0 0 1 64 16.74z\"\r\n          fillRule=\"evenodd\"\r\n          fill=\"url(#a)\"\r\n        />\r\n        <path\r\n          d=\"M64.12 125.54A61.54 61.54 0 1 1 125.66 64a61.54 61.54 0 0 1-61.54 61.54zm0-121.1A59.57 59.57 0 1 0 123.7 64 59.57 59.57 0 0 0 64.1 4.43zM64 115.56a51.7 51.7 0 1 1 51.7-51.7 51.7 51.7 0 0 1-51.7 51.7zM64 14.4a49.48 49.48 0 1 0 49.48 49.48A49.48 49.48 0 0 0 64 14.4z\"\r\n          fillRule=\"evenodd\"\r\n          fill=\"url(#b)\"\r\n        />\r\n        <animateTransform\r\n          attributeName=\"transform\"\r\n          type=\"rotate\"\r\n          from=\"0 64 64\"\r\n          to=\"360 64 64\"\r\n          dur=\"800ms\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </g>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import { useEffect, useState } from \"react\";\r\nimport style from \"./Converter.module.scss\";\r\nimport { Autocomplete } from \"./Converter\";\r\nimport sprite from \"../../../assets/images/icons.svg\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../Store/hooks\";\r\nimport { fetchPrice, removePrice } from \"../../../Store/Reducers/converterSlice\";\r\n\r\ninterface LastUpdateTimerProps {\r\n  coin: Autocomplete;\r\n}\r\n\r\nconst LastUpdateTimer = ({ coin }: LastUpdateTimerProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const price = useAppSelector((state) => state.converter.price);\r\n  const [updateCount, setUpdateCount] = useState<number>(0);\r\n  const [timerChange, setTimerChange] = useState<number>(1000);\r\n\r\n  let timer: any = null;\r\n\r\n  useEffect(() => {\r\n    clearInterval(timer);\r\n    if (!price) {\r\n      return\r\n    }\r\n    timer = setTimeout(() => {\r\n      setUpdateCount((prev) => prev + 1);\r\n      if (updateCount === 59) {\r\n        setUpdateCount(1);\r\n        setTimerChange(60000);\r\n      }\r\n    }, timerChange);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [updateCount, price])\r\n\r\n  useEffect(() => {\r\n    setUpdateCount(0);\r\n    setTimerChange(1000);\r\n  }, [coin]);\r\n\r\n  function handleUpdate() {\r\n    dispatch(removePrice())\r\n    dispatch(fetchPrice(coin.pair));\r\n    setUpdateCount(0);\r\n    setTimerChange(1000);\r\n  }\r\n\r\n  return (\r\n    <div className={style.lastUpdateContainer}>\r\n      <p className={style.lastUpdateText}>\r\n        Last price update:{\" \"}\r\n        <span>\r\n          {updateCount}\r\n          {timerChange === 1000 ? \"s\" : \"m\"}\r\n        </span>{\" \"}\r\n        ago\r\n      </p>\r\n      <svg\r\n        className={style.refreshIcon}\r\n        role=\"button\"\r\n        onClick={() => handleUpdate()}\r\n      >\r\n        <use href={sprite + \"#refresh\"} />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LastUpdateTimer;\r\n","import style from \"./Converter.module.scss\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../Store/hooks\";\r\nimport NavCrypto from \"../NavCrypto\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  fetchCoinsList,\r\n  fetchPrice,\r\n  removePrice,\r\n} from \"../../../Store/Reducers/converterSlice\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport Spinner from \"../../Common/Spinner\";\r\nimport LastUpdateTimer from \"./LastUpdateTimer\";\r\nimport { numberToFixed2 } from \"../../../utils/utils\";\r\n\r\n\r\nexport interface Autocomplete {\r\n  firstLetter: string;\r\n  pair: string;\r\n}\r\n\r\nconst Converter = () => {\r\n\r\n  const { coinsList, price, isLoadingConverter } = useAppSelector(\r\n    (state) => state.converter\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [coin, setCoin] = useState<Autocomplete>({\r\n    firstLetter: \"B\",\r\n    pair: \"BTCUSDT\",\r\n  });\r\n  const [value, setValue] = useState<number | \"\">(1);\r\n  const [convertedValue, setConvertedValue] = useState<number | \"\">(\"\");\r\n\r\n\r\n  useEffect(() => {\r\n    if (!coinsList.length) {\r\n      dispatch(fetchCoinsList());\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setValue(1);\r\n    setConvertedValue(\"\")\r\n    dispatch(fetchPrice(coin.pair));\r\n    \r\n    return () => {\r\n      dispatch(removePrice())\r\n    }\r\n  }, [coin.pair]);\r\n\r\n  useEffect(() => {\r\n    if(!value) {\r\n      setValue(1);\r\n    }\r\n    setConvertedValue(price && value ? price * value : \"\");\r\n    return () => setConvertedValue(\"\");\r\n  }, [price]);\r\n\r\n\r\n  const handleChangeCoin = (\r\n    event: React.SyntheticEvent,\r\n    newCoin: Autocomplete | null\r\n  ): void => {\r\n    if (newCoin) {\r\n      setCoin({ firstLetter: newCoin.firstLetter, pair: newCoin.pair });\r\n    }\r\n  };\r\n\r\n  const handleChangeValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (e.currentTarget.value) {\r\n      setValue(Number(e.currentTarget.value))\r\n      setConvertedValue(\r\n        numberToFixed2(Number(e.currentTarget.value) * (price || 0))\r\n      );\r\n    } else {\r\n      setValue(\"\")\r\n      setConvertedValue(\"\");\r\n    }\r\n  };\r\n\r\n  const handleChangeConvertedValue = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setConvertedValue(\r\n      Number(e.currentTarget.value) || \"\"\r\n    );\r\n    if (e.currentTarget.value) {\r\n      setValue(numberToFixed2(Number(e.currentTarget.value) / (price as number)));\r\n    } else {\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  const options = coinsList.map((pair) => {\r\n    const firstLetter = pair[0].toUpperCase();\r\n    return {\r\n      firstLetter: firstLetter,\r\n      pair,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <NavCrypto />\r\n      <section>\r\n        <div className={style.hero}>\r\n          <h1 className={style.heroInside}>Cryptocurrency Converter</h1>\r\n        </div>\r\n        <div className={style.converter}>\r\n          <div className={style.converterInside}>\r\n            <Autocomplete\r\n              id=\"coinsList\"\r\n              className={style.autocomplete}\r\n              value={coin}\r\n              onChange={(event, newCoin) => handleChangeCoin(event, newCoin)}\r\n              options={options.sort(\r\n                (a, b) => a.firstLetter.localeCompare(b.firstLetter)\r\n              )}\r\n              groupBy={(coin) => coin.firstLetter}\r\n              getOptionLabel={(coin) => coin.pair.replace(/USDT/, \"\")}\r\n              renderInput={(params) => <TextField {...params} label=\"Coin\" />}\r\n            />\r\n\r\n            <input\r\n              type=\"number\"\r\n              className={style.converterInput}\r\n              value={value}\r\n              disabled={!price}\r\n              onChange={(e) => handleChangeValue(e)}\r\n            />\r\n\r\n            <p className={style.converterText}>Convert to USDT</p>\r\n\r\n            <div className={style.converterInputWrapper}>\r\n              <input\r\n                type=\"number\"\r\n                className={style.converterInput}\r\n                value={convertedValue}\r\n                disabled={!price}\r\n                onChange={(e) => handleChangeConvertedValue(e)}\r\n              />\r\n              {isLoadingConverter && <Spinner />}\r\n            </div>\r\n            <LastUpdateTimer coin={coin} />\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Converter;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"iconTime\":\"NavCrypto_iconTime__I4Vhv\",\"hidden\":\"NavCrypto_hidden__tN0cv\",\"container\":\"NavCrypto_container__Wd1RQ\",\"navCrypto\":\"NavCrypto_navCrypto__C9pNy\",\"listLeft\":\"NavCrypto_listLeft__NSkYO\",\"leftLink\":\"NavCrypto_leftLink__Y2MD1\",\"arrow\":\"NavCrypto_arrow__v0AAw\",\"home\":\"NavCrypto_home__deF99\",\"currentPath\":\"NavCrypto_currentPath__sTRX4\",\"listCenter\":\"NavCrypto_listCenter__bfrWA\"};","import style from \"./NavCrypto.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport sprite from \"../../assets/images/icons.svg\";\r\n\r\nconst NavCrypto = () => {\r\n  let currentPath = window.location.hash;\r\n  const regexpCoins = /#\\/crypto\\//i;\r\n  const regexpSelectedCoin = /#\\/crypto\\/coins\\//i;\r\n  const isSelectedCoin = regexpSelectedCoin.test(currentPath);\r\n  currentPath = currentPath.replace(\r\n    isSelectedCoin ? regexpSelectedCoin : regexpCoins,\r\n    \"\"\r\n  );\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <div className={style.navCrypto}>\r\n        <ul className={style.listLeft}>\r\n          <li>\r\n            <NavLink to=\"/\" className={style.leftLink}>\r\n              <svg className={style.home}>\r\n                <use href={sprite + \"#home\"} />\r\n              </svg>\r\n              <svg className={style.arrow}>\r\n                <use href={sprite + \"#arrow_right\"} />\r\n              </svg>\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/crypto/coins\" className={style.leftLink}>\r\n              Crypto\r\n              <svg className={style.arrow}>\r\n                <use href={sprite + \"#arrow_right\"} />\r\n              </svg>\r\n            </NavLink>\r\n          </li>\r\n          <li className={isSelectedCoin ? \"\" : \"hidden\"}>\r\n            <NavLink to=\"/crypto/coins\" className={style.leftLink}>\r\n              Coins\r\n              <svg className={style.arrow}>\r\n                <use href={sprite + \"#arrow_right\"} />\r\n              </svg>\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <span className={style.currentPath}>{currentPath}</span>\r\n          </li>\r\n        </ul>\r\n        <ul className={style.listCenter}>\r\n          <li>\r\n            <NavLink to=\"/crypto/coins\" className={style.centerLink}>\r\n              Coins\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/crypto/exchanges\" className={style.centerLink}>\r\n              Exchanges\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/crypto/arbitrage\" className={style.centerLink}>\r\n              Arbitrage\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/crypto/converter\" className={style.centerLink}>\r\n              Converter\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavCrypto;\r\n","export const setNumberFormat = (number: number): string => new Intl.NumberFormat(\"ua-UA\").format(number);\r\nexport const removeFloatNull = (value: number): string => {\r\n  const regExp = new RegExp(/\\.?0*$/);\r\n  return value < 1000 ? String(value).replace(regExp, \"\") : setNumberFormat(value);\r\n};\r\nexport const numberToFixed2 = (number: number): number => {\r\n  if (number < 0.00000001) {\r\n    return (Math.trunc(number * 10000000000)) / 10000000000;\r\n  } else if (number < 0.000001) {\r\n    return (Math.trunc(number * 100000000)) / 100000000;\r\n  } else if (number < 0.0001) {\r\n    return (Math.trunc(number * 1000000)) / 1000000;\r\n  } else if (number < 0.01) {\r\n    return (Math.trunc(number * 10000)) / 10000;\r\n  }\r\n  return ((Math.trunc(number * 100)) / 100)\r\n}"],"names":["className","style","xmlns","version","viewBox","id","offset","stopColor","d","fillRule","fill","attributeName","type","from","to","dur","repeatCount","coin","dispatch","useAppDispatch","price","useAppSelector","state","converter","useState","updateCount","setUpdateCount","timerChange","setTimerChange","timer","useEffect","clearInterval","setTimeout","prev","role","onClick","removePrice","fetchPrice","pair","href","sprite","coinsList","isLoadingConverter","firstLetter","setCoin","value","setValue","convertedValue","setConvertedValue","length","fetchCoinsList","options","map","toUpperCase","NavCrypto","Autocomplete","onChange","event","newCoin","handleChangeCoin","sort","a","b","localeCompare","groupBy","getOptionLabel","replace","renderInput","params","TextField","label","disabled","e","currentTarget","Number","numberToFixed2","handleChangeValue","handleChangeConvertedValue","currentPath","window","location","hash","regexpSelectedCoin","isSelectedCoin","test","setNumberFormat","number","Intl","NumberFormat","format","removeFloatNull","regExp","RegExp","String","Math","trunc"],"sourceRoot":""}