{"version":3,"file":"static/js/914.6d875bc9.chunk.js","mappings":"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","sources":["webpack://crypto-project/./src/Components/Crypto/Converter/Converter.module.scss?ed5b","Components/Crypto/Converter/LastUpdateTimer.tsx","Components/Crypto/Converter/Converter.tsx","webpack://crypto-project/./src/Components/Crypto/NavCrypto/NavCrypto.module.scss?63ab","Components/Crypto/NavCrypto/NavCrypto.tsx","utils/utils.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"converterInside\":\"Converter_converterInside__HXnyE\",\"converterInput\":\"Converter_converterInput__mqEWt\",\"iconTime\":\"Converter_iconTime__ULezP\",\"hidden\":\"Converter_hidden__EEqxQ\",\"percentagePlus\":\"Converter_percentagePlus__CsJRM\",\"percentageMinus\":\"Converter_percentageMinus__ZtKU+\",\"hero\":\"Converter_hero__9P5HA\",\"heroInside\":\"Converter_heroInside__sxV5A\",\"converter\":\"Converter_converter__rqYfb\",\"autocomplete\":\"Converter_autocomplete__W5LfP\",\"converterText\":\"Converter_converterText__Od9OX\",\"converterInputWrapper\":\"Converter_converterInputWrapper__JSSxj\",\"lastUpdateContainer\":\"Converter_lastUpdateContainer__LK6m5\",\"refreshIcon\":\"Converter_refreshIcon__J30BA\",\"lastUpdateText\":\"Converter_lastUpdateText__jvRni\"};","import { useEffect, useState } from 'react';\r\nimport { IAutocomplete } from './Converter';\r\nimport { useAppDispatch, useAppSelector } from '../../../Store/hooks';\r\nimport {\r\n  fetchPrice,\r\n  removePrice,\r\n} from '../../../Store/Reducers/converterSlice';\r\nimport sprite from '../../../assets/images/icons.svg';\r\nimport style from './Converter.module.scss';\r\n\r\ninterface LastUpdateTimerProps {\r\n  coin: IAutocomplete;\r\n}\r\n\r\nconst SECOND = 1000;\r\nconst MINUTE = 60000;\r\n\r\nexport const LastUpdateTimer = ({ coin }: LastUpdateTimerProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const price = useAppSelector(state => state.converter.price);\r\n  const [updateCount, setUpdateCount] = useState<number>(0);\r\n  const [timeInterval, setTimeInterval] = useState<1000 | 60000>(SECOND);\r\n\r\n  useEffect(() => {\r\n    let timer: any = null;\r\n\r\n    clearInterval(timer);\r\n    if (!price) {\r\n      return;\r\n    }\r\n    timer = setTimeout(() => {\r\n      setUpdateCount(prev => prev + 1);\r\n      if (updateCount === 59) {\r\n        setUpdateCount(1);\r\n        setTimeInterval(MINUTE);\r\n      }\r\n    }, timeInterval);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [updateCount, price]);\r\n\r\n  useEffect(() => {\r\n    setUpdateCount(0);\r\n    setTimeInterval(SECOND);\r\n  }, [coin]);\r\n\r\n  function handleUpdate() {\r\n    dispatch(removePrice());\r\n    dispatch(fetchPrice(coin.pair));\r\n    setUpdateCount(0);\r\n    setTimeInterval(SECOND);\r\n  }\r\n\r\n  return (\r\n    <div className={style.lastUpdateContainer}>\r\n      <p className={style.lastUpdateText}>\r\n        Last price update:{' '}\r\n        <span>\r\n          {updateCount}\r\n          {timeInterval === SECOND ? 's' : 'm'}\r\n        </span>{' '}\r\n        ago\r\n      </p>\r\n      <svg className={style.refreshIcon} role=\"button\" onClick={handleUpdate}>\r\n        <use href={sprite + '#refresh'} />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\nimport { useAppDispatch, useAppSelector } from '../../../Store/hooks';\r\nimport NavCrypto from '../NavCrypto/NavCrypto';\r\nimport {\r\n  fetchCoinsList,\r\n  fetchPrice,\r\n  removePrice,\r\n} from '../../../Store/Reducers/converterSlice';\r\nimport { Spinner } from '../../Common';\r\nimport { LastUpdateTimer } from './LastUpdateTimer';\r\nimport { numberToFixed2 } from '../../../utils/utils';\r\nimport style from './Converter.module.scss';\r\n\r\nexport interface IAutocomplete {\r\n  firstLetter: string;\r\n  pair: string;\r\n}\r\n\r\nconst Converter = () => {\r\n  const { coinsList, price, isLoadingConverter } = useAppSelector(\r\n    state => state.converter\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [coin, setCoin] = useState<IAutocomplete>({\r\n    firstLetter: 'B',\r\n    pair: 'BTCUSDT',\r\n  });\r\n  const [value, setValue] = useState<number | ''>(1);\r\n  const [convertedValue, setConvertedValue] = useState<number | ''>('');\r\n\r\n  useEffect(() => {\r\n    if (!coinsList.length) {\r\n      dispatch(fetchCoinsList());\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setValue(1);\r\n    setConvertedValue('');\r\n    dispatch(fetchPrice(coin.pair));\r\n\r\n    return () => {\r\n      dispatch(removePrice());\r\n    };\r\n  }, [coin.pair]);\r\n\r\n  useEffect(() => {\r\n    if (!value) {\r\n      setValue(1);\r\n    }\r\n    setConvertedValue(price && value ? price * value : '');\r\n    return () => setConvertedValue('');\r\n  }, [price]);\r\n\r\n  const onChangeCoin = (\r\n    event: React.SyntheticEvent,\r\n    newCoin: IAutocomplete | null\r\n  ): void => {\r\n    if (newCoin) {\r\n      setCoin({ firstLetter: newCoin.firstLetter, pair: newCoin.pair });\r\n    }\r\n  };\r\n\r\n  const onChangeValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (e.currentTarget.value) {\r\n      setValue(Number(e.currentTarget.value));\r\n      setConvertedValue(\r\n        numberToFixed2(Number(e.currentTarget.value) * (price || 0))\r\n      );\r\n    } else {\r\n      setValue('');\r\n      setConvertedValue('');\r\n    }\r\n  };\r\n\r\n  const onChangeConvertedValue: React.ChangeEventHandler<\r\n    HTMLInputElement\r\n  > = e => {\r\n    setConvertedValue(Number(e.currentTarget.value) || '');\r\n    if (e.currentTarget.value) {\r\n      setValue(\r\n        numberToFixed2(Number(e.currentTarget.value) / (price as number))\r\n      );\r\n    } else {\r\n      setValue('');\r\n    }\r\n  };\r\n\r\n  const options = coinsList.map(pair => {\r\n    const firstLetter = pair[0].toUpperCase();\r\n    return {\r\n      firstLetter: firstLetter,\r\n      pair,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <NavCrypto />\r\n      <section>\r\n        <div className={style.hero}>\r\n          <h1 className={style.heroInside}>Cryptocurrency Converter</h1>\r\n        </div>\r\n        <div className={style.converter}>\r\n          <div className={style.converterInside}>\r\n            <Autocomplete\r\n              id=\"coinsList\"\r\n              className={style.autocomplete}\r\n              value={coin}\r\n              onChange={onChangeCoin}\r\n              options={options.sort((a, b) =>\r\n                a.firstLetter.localeCompare(b.firstLetter)\r\n              )}\r\n              groupBy={coin => coin.firstLetter}\r\n              getOptionLabel={coin => coin.pair.replace(/USDT/, '')}\r\n              renderInput={params => <TextField {...params} label=\"Coin\" />}\r\n            />\r\n\r\n            <input\r\n              type=\"number\"\r\n              className={style.converterInput}\r\n              value={value}\r\n              disabled={!price}\r\n              onChange={onChangeValue}\r\n            />\r\n\r\n            <p className={style.converterText}>Convert to USDT</p>\r\n\r\n            <div className={style.converterInputWrapper}>\r\n              <input\r\n                type=\"number\"\r\n                className={style.converterInput}\r\n                value={convertedValue}\r\n                disabled={!price}\r\n                onChange={onChangeConvertedValue}\r\n              />\r\n              {isLoadingConverter && <Spinner className={'spinnerConverter'} />}\r\n            </div>\r\n            <LastUpdateTimer coin={coin} />\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Converter;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"iconTime\":\"NavCrypto_iconTime__Q7ijG\",\"hidden\":\"NavCrypto_hidden__DuPiK\",\"percentagePlus\":\"NavCrypto_percentagePlus__kkbya\",\"percentageMinus\":\"NavCrypto_percentageMinus__1F7pl\",\"container\":\"NavCrypto_container__21zHw\",\"navCrypto\":\"NavCrypto_navCrypto__EPQeL\",\"listLeft\":\"NavCrypto_listLeft__0-anf\",\"leftLink\":\"NavCrypto_leftLink__8VxOk\",\"arrow\":\"NavCrypto_arrow__DWHZ6\",\"home\":\"NavCrypto_home__NTcNG\",\"currentPath\":\"NavCrypto_currentPath__cjwcD\",\"listCenter\":\"NavCrypto_listCenter__rdBdZ\",\"leftText\":\"NavCrypto_leftText__vU0KR\"};","import { NavLink, useLocation } from 'react-router-dom';\r\nimport sprite from '../../../assets/images/icons.svg';\r\nimport style from './NavCrypto.module.scss';\r\n\r\ninterface NavCryptoProps {\r\n  component?: 'Coins' | 'Exchanges';\r\n}\r\n\r\nconst NavCrypto = ({ component }: NavCryptoProps) => {\r\n  let currentPath = useLocation().pathname;\r\n\r\n  const regexpSelectedComponent = new RegExp(`/${component}/`, 'i');\r\n  const isSelectedComponent = regexpSelectedComponent.test(currentPath);\r\n  currentPath = isSelectedComponent\r\n    ? currentPath.replace(regexpSelectedComponent, '').substring(0, 17) +\r\n      (currentPath.length > 18 ? '...' : '')\r\n    : currentPath.replace(/^\\//, '');\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <div className={style.navCrypto}>\r\n        <ul className={style.listLeft}>\r\n          <li>\r\n            <NavLink to=\"/\" className={style.leftLink}>\r\n              <svg className={style.home}>\r\n                <use href={sprite + '#home'} />\r\n              </svg>\r\n              <svg className={style.arrow}>\r\n                <use href={sprite + '#arrow_right'} />\r\n              </svg>\r\n            </NavLink>\r\n          </li>\r\n          <li className={isSelectedComponent ? '' : style.hidden}>\r\n            <NavLink to={`/${component}`} className={style.leftLink}>\r\n              <span className={style.leftText}>{component}</span>\r\n              <svg className={style.arrow}>\r\n                <use href={sprite + '#arrow_right'} />\r\n              </svg>\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <span className={`${style.currentPath} ${style.leftText}`}>\r\n              {currentPath}\r\n            </span>\r\n          </li>\r\n        </ul>\r\n\r\n        <ul className={style.listCenter}>\r\n          <li>\r\n            <NavLink to=\"/coins\" className={style.centerLink}>\r\n              Coins\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/exchanges\" className={style.centerLink}>\r\n              Exchanges\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/arbitrage\" className={style.centerLink}>\r\n              Arbitrage\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/converter\" className={style.centerLink}>\r\n              Converter\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavCrypto;\r\n","export const setNumberFormat = (number: number): string => new Intl.NumberFormat(\"ua-UA\").format(number);\r\n\r\nexport const removeFloatNull = (value: number): string => {\r\n  const regExp = new RegExp(/\\.?0*$/);\r\n  return value < 1000 ? String(value).replace(regExp, \"\") : setNumberFormat(value);\r\n};\r\n\r\nexport const numberToFixed2 = (number: number): number => {\r\n  if (number < 0.00000001) {\r\n    return (Math.trunc(number * 10000000000)) / 10000000000;\r\n  } else if (number < 0.000001) {\r\n    return (Math.trunc(number * 100000000)) / 100000000;\r\n  } else if (number < 0.0001) {\r\n    return (Math.trunc(number * 1000000)) / 1000000;\r\n  } else if (number < 0.01) {\r\n    return (Math.trunc(number * 10000)) / 10000;\r\n  }\r\n  return ((Math.trunc(number * 100)) / 100)\r\n}\r\n\r\nexport const setClassNamePlusOrMinus = (value: number) => {\r\n  return value > 0 ? 'percentagePlus' : 'percentageMinus';\r\n}"],"names":["SECOND","LastUpdateTimer","coin","dispatch","useAppDispatch","price","useAppSelector","state","converter","useState","updateCount","setUpdateCount","timeInterval","setTimeInterval","useEffect","timer","clearInterval","setTimeout","prev","className","style","role","onClick","removePrice","fetchPrice","pair","href","sprite","coinsList","isLoadingConverter","firstLetter","setCoin","value","setValue","convertedValue","setConvertedValue","length","fetchCoinsList","options","map","toUpperCase","NavCrypto","Autocomplete","id","onChange","event","newCoin","sort","a","b","localeCompare","groupBy","getOptionLabel","replace","renderInput","params","TextField","label","type","disabled","e","currentTarget","Number","numberToFixed2","component","currentPath","useLocation","pathname","regexpSelectedComponent","RegExp","isSelectedComponent","test","substring","to","setNumberFormat","number","Intl","NumberFormat","format","removeFloatNull","regExp","String","Math","trunc","setClassNamePlusOrMinus"],"sourceRoot":""}