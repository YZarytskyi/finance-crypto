{"version":3,"file":"static/js/915.cbb2503f.chunk.js","mappings":"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","sources":["webpack://crypto-project/./src/pages/Crypto/Converter/Converter.module.scss?2783","pages/Crypto/Converter/LastUpdateTimer.tsx","pages/Crypto/Converter/Converter.tsx","utils/utils.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"converterInside\":\"Converter_converterInside__kgtqp\",\"converterInput\":\"Converter_converterInput__+21MV\",\"iconTime\":\"Converter_iconTime__QvmhL\",\"hidden\":\"Converter_hidden__CTQ3k\",\"percentagePlus\":\"Converter_percentagePlus__M4VPO\",\"percentageMinus\":\"Converter_percentageMinus__dIFzf\",\"hero\":\"Converter_hero__V6f5t\",\"heroInside\":\"Converter_heroInside__XW2vL\",\"converter\":\"Converter_converter__TcsZy\",\"autocomplete\":\"Converter_autocomplete__+WU9s\",\"converterText\":\"Converter_converterText__T90eT\",\"converterInputWrapper\":\"Converter_converterInputWrapper__QERIU\",\"lastUpdateContainer\":\"Converter_lastUpdateContainer__eQn3x\",\"refreshIcon\":\"Converter_refreshIcon__sQfQc\",\"lastUpdateText\":\"Converter_lastUpdateText__SgDHO\"};","import { useEffect, useState } from 'react'\r\nimport { IAutocomplete } from './Converter'\r\nimport { useAppDispatch, useAppSelector } from 'hooks/redux-hooks'\r\nimport { fetchPrice, removePrice } from 'Store/Reducers/converterSlice'\r\nimport sprite from 'assets/images/icons.svg'\r\nimport style from './Converter.module.scss'\r\n\r\ninterface LastUpdateTimerProps {\r\n  coin: IAutocomplete\r\n}\r\n\r\nconst SECOND = 1000\r\nconst MINUTE = 60000\r\n\r\nexport const LastUpdateTimer = ({ coin }: LastUpdateTimerProps) => {\r\n  const dispatch = useAppDispatch()\r\n  const price = useAppSelector((state) => state.converter.price)\r\n  const [updateCount, setUpdateCount] = useState<number>(0)\r\n  const [timeInterval, setTimeInterval] = useState<1000 | 60000>(SECOND)\r\n\r\n  useEffect(() => {\r\n    let timer: any = null\r\n\r\n    clearInterval(timer)\r\n    if (!price) {\r\n      return\r\n    }\r\n    timer = setTimeout(() => {\r\n      setUpdateCount((prev) => prev + 1)\r\n      if (updateCount === 59) {\r\n        setUpdateCount(1)\r\n        setTimeInterval(MINUTE)\r\n      }\r\n    }, timeInterval)\r\n\r\n    return () => clearInterval(timer)\r\n  }, [updateCount, price])\r\n\r\n  useEffect(() => {\r\n    setUpdateCount(0)\r\n    setTimeInterval(SECOND)\r\n  }, [coin])\r\n\r\n  function handleUpdate() {\r\n    dispatch(removePrice())\r\n    dispatch(fetchPrice(coin.pair))\r\n    setUpdateCount(0)\r\n    setTimeInterval(SECOND)\r\n  }\r\n\r\n  return (\r\n    <div className={style.lastUpdateContainer}>\r\n      <p className={style.lastUpdateText}>\r\n        Last price update:{' '}\r\n        <span>\r\n          {updateCount}\r\n          {timeInterval === SECOND ? 's' : 'm'}\r\n        </span>{' '}\r\n        ago\r\n      </p>\r\n      <svg className={style.refreshIcon} role='button' onClick={handleUpdate}>\r\n        <use href={sprite + '#refresh'} />\r\n      </svg>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport Autocomplete from '@mui/material/Autocomplete'\r\nimport TextField from '@mui/material/TextField'\r\nimport { useAppDispatch, useAppSelector } from 'hooks/redux-hooks'\r\nimport { fetchCoinsList, fetchPrice, removePrice } from 'Store/Reducers/converterSlice'\r\nimport { Spinner } from 'Components/Common'\r\nimport { LastUpdateTimer } from './LastUpdateTimer'\r\nimport { numberToFixed2 } from 'utils/utils'\r\nimport style from './Converter.module.scss'\r\n\r\nexport interface IAutocomplete {\r\n  firstLetter: string\r\n  pair: string\r\n}\r\n\r\nconst Converter = () => {\r\n  const { coinsList, price, isLoadingConverter } = useAppSelector((state) => state.converter)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const [coin, setCoin] = useState<IAutocomplete>({\r\n    firstLetter: 'B',\r\n    pair: 'BTCUSDT',\r\n  })\r\n  const [value, setValue] = useState<number | ''>(1)\r\n  const [convertedValue, setConvertedValue] = useState<number | ''>('')\r\n\r\n  useEffect(() => {\r\n    if (!coinsList.length) {\r\n      dispatch(fetchCoinsList())\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setValue(1)\r\n    setConvertedValue('')\r\n    dispatch(fetchPrice(coin.pair))\r\n\r\n    return () => {\r\n      dispatch(removePrice())\r\n    }\r\n  }, [coin.pair])\r\n\r\n  useEffect(() => {\r\n    if (!value) {\r\n      setValue(1)\r\n    }\r\n    setConvertedValue(price && value ? price * value : '')\r\n    return () => setConvertedValue('')\r\n  }, [price])\r\n\r\n  const onChangeCoin = (event: React.SyntheticEvent, newCoin: IAutocomplete | null): void => {\r\n    if (newCoin) {\r\n      setCoin({ firstLetter: newCoin.firstLetter, pair: newCoin.pair })\r\n    }\r\n  }\r\n\r\n  const onChangeValue = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    if (e.currentTarget.value) {\r\n      setValue(Number(e.currentTarget.value))\r\n      setConvertedValue(numberToFixed2(Number(e.currentTarget.value) * (price || 0)))\r\n    } else {\r\n      setValue('')\r\n      setConvertedValue('')\r\n    }\r\n  }\r\n\r\n  const onChangeConvertedValue: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n    setConvertedValue(Number(e.currentTarget.value) || '')\r\n    if (e.currentTarget.value) {\r\n      setValue(numberToFixed2(Number(e.currentTarget.value) / (price as number)))\r\n    } else {\r\n      setValue('')\r\n    }\r\n  }\r\n\r\n  const options = coinsList.map((pair) => {\r\n    const firstLetter = pair[0].toUpperCase()\r\n    return {\r\n      firstLetter: firstLetter,\r\n      pair,\r\n    }\r\n  })\r\n\r\n  return (\r\n    <section>\r\n      <div className={style.hero}>\r\n        <h1 className={style.heroInside}>Cryptocurrency Converter</h1>\r\n      </div>\r\n      <div className={style.converter}>\r\n        <div className={style.converterInside}>\r\n          <Autocomplete\r\n            id='coinsList'\r\n            className={style.autocomplete}\r\n            value={coin}\r\n            onChange={onChangeCoin}\r\n            options={options.sort((a, b) => a.firstLetter.localeCompare(b.firstLetter))}\r\n            groupBy={(coin) => coin.firstLetter}\r\n            getOptionLabel={(coin) => coin.pair.replace(/USDT/, '')}\r\n            renderInput={(params) => <TextField {...params} label='Coin' />}\r\n          />\r\n\r\n          <input\r\n            type='number'\r\n            className={style.converterInput}\r\n            value={value}\r\n            disabled={!price}\r\n            onChange={onChangeValue}\r\n          />\r\n\r\n          <p className={style.converterText}>Convert to USDT</p>\r\n\r\n          <div className={style.converterInputWrapper}>\r\n            <input\r\n              type='number'\r\n              className={style.converterInput}\r\n              value={convertedValue}\r\n              disabled={!price}\r\n              onChange={onChangeConvertedValue}\r\n            />\r\n            {isLoadingConverter && <Spinner className={'spinnerConverter'} />}\r\n          </div>\r\n          <LastUpdateTimer coin={coin} />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Converter\r\n","export const setNumberFormat = (number: number): string =>\r\n  new Intl.NumberFormat('ua-UA').format(number)\r\n\r\nexport const removeFloatNull = (value: number): string => {\r\n  const regExp = new RegExp(/\\.?0*$/)\r\n  return value < 1000 ? String(value).replace(regExp, '') : setNumberFormat(value)\r\n}\r\n\r\nexport const numberToFixed2 = (number: number): number => {\r\n  if (number < 0.00000001) {\r\n    return Math.trunc(number * 10000000000) / 10000000000\r\n  } else if (number < 0.000001) {\r\n    return Math.trunc(number * 100000000) / 100000000\r\n  } else if (number < 0.0001) {\r\n    return Math.trunc(number * 1000000) / 1000000\r\n  } else if (number < 0.01) {\r\n    return Math.trunc(number * 10000) / 10000\r\n  }\r\n  return Math.trunc(number * 100) / 100\r\n}\r\n\r\nexport const setClassNamePlusOrMinus = (value: number) => {\r\n  return value > 0 ? 'percentagePlus' : 'percentageMinus'\r\n}\r\n"],"names":["SECOND","LastUpdateTimer","coin","dispatch","useAppDispatch","price","useAppSelector","state","converter","useState","updateCount","setUpdateCount","timeInterval","setTimeInterval","useEffect","timer","clearInterval","setTimeout","prev","className","style","role","onClick","removePrice","fetchPrice","pair","href","sprite","coinsList","isLoadingConverter","firstLetter","setCoin","value","setValue","convertedValue","setConvertedValue","length","fetchCoinsList","options","map","toUpperCase","Autocomplete","id","onChange","event","newCoin","sort","a","b","localeCompare","groupBy","getOptionLabel","replace","renderInput","params","TextField","label","type","disabled","e","currentTarget","Number","numberToFixed2","setNumberFormat","number","Intl","NumberFormat","format","removeFloatNull","regExp","RegExp","String","Math","trunc","setClassNamePlusOrMinus"],"sourceRoot":""}