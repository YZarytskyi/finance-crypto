{"version":3,"file":"static/js/941.1d77fb29.chunk.js","mappings":"kKACA,MAAmG,2BAAnG,EAAwI,0BAAxI,EAA4K,0BAA5K,EAA8M,wBAA9M,EAAqP,+BAArP,EAAgS,4BAAhS,EAAwU,4BAAxU,EAAmX,+BAAnX,EAAqa,mCAAra,EAAqd,6BAArd,EAA+f,6BAA/f,EAAwiB,4B,wFCOliBA,EAASC,EAAAA,GAAW,CACxBC,SAAUD,EAAAA,KAAaE,SAAS,iCAChCC,MAAOH,EAAAA,KAEJG,MAAM,wBACND,SAAS,iCACZE,QAASJ,EAAAA,KAAaE,SAAS,mCAiDjC,EAxCqB,WAAO,IAAD,UACzB,GAAkCG,EAAAA,EAAAA,WAAkB,GAApD,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAIIC,EAAAA,EAAAA,IAAqB,CAAEC,UAAUC,EAAAA,EAAAA,GAAYX,KAH/CY,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAIf,OACE,kBAAME,SAAUH,GAHD,SAACI,GAAD,OAAuBT,GAAa,EAApC,IAGyBU,UAAWC,EAAnD,WACE,mBAAOD,UAAWC,EAAlB,uBAEE,oCAAWP,EAAS,aAApB,IAAiCM,UAAWC,MAC5C,cAAGD,UAAWC,EAAd,SAAuC,UAAAL,EAAOZ,gBAAP,SAAiBG,QAAjB,UAA2BS,EAAOZ,gBAAlC,aAA2B,EAAiBG,QAAU,UAE/F,mBAAOa,UAAWC,EAAlB,mBAEE,oCAAWP,EAAS,UAApB,IAA8BM,UAAWC,MACzC,cAAGD,UAAWC,EAAd,SAAuC,UAAAL,EAAOV,aAAP,SAAcC,QAAd,UAAwBS,EAAOV,aAA/B,aAAwB,EAAcC,QAAU,UAEzF,mBAAOa,UAAWC,EAAlB,qBAEE,uCAAcP,EAAS,YAAvB,IAAmCM,UAAWC,MAC9C,cAAGD,UAAWC,EAAd,SAAuC,UAAAL,EAAOT,eAAP,SAAgBA,QAAUS,EAAOT,QAAQA,QAAU,UAE5F,SAAC,IAAD,CAAYe,KAAK,SAASC,QAAQ,WAAWH,UAAWC,EAAxD,mBAGF,UAACG,EAAA,EAAD,CAAOf,UAAWA,EAAWC,aAAcA,EAA3C,WACE,eAAIU,UAAWC,EAAf,8CACA,cAAGD,UAAWC,EAAd,2IAOL,EC9CD,EAZiB,WACf,OACE,qBAASD,UAAWC,EAApB,WACE,eAAID,UAAWC,EAAf,6BACA,iBAAKD,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,KAChB,SAAC,EAAD,SAIP,C","sources":["webpack://crypto-project/./src/Components/Contacts/Contacts.module.scss?dcbf","Components/Contacts/ContactsForm.tsx","Components/Contacts/Contacts.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"iconTime\":\"Contacts_iconTime__f6b5B\",\"hidden\":\"Contacts_hidden__v3cPn\",\"contacts\":\"Contacts_contacts__ZovVL\",\"heading\":\"Contacts_heading__VFJt3\",\"formImg\":\"Contacts_formImg__3M28T\",\"image\":\"Contacts_image__aMoWw\",\"contactsForm\":\"Contacts_contactsForm__LD5BV\",\"formLabel\":\"Contacts_formLabel__AuL2g\",\"formInput\":\"Contacts_formInput__GRo-P\",\"formTextarea\":\"Contacts_formTextarea__N57NN\",\"formErrorMessage\":\"Contacts_formErrorMessage__ePSqE\",\"formButton\":\"Contacts_formButton__8Y25i\",\"modalTitle\":\"Contacts_modalTitle__Dv147\",\"modalText\":\"Contacts_modalText__wryce\"};","import style from \"./Contacts.module.scss\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport SendButton from \"@mui/material/Button\";\r\nimport Modal from \"../Common/Modal\"\r\n\r\nconst schema = yup.object({\r\n  fullName: yup.string().required(\"⚠ This field is required\"),\r\n  email: yup\r\n    .string()\r\n    .email(\"⚠ Invalid email\")\r\n    .required(\"⚠ This field is required\"),\r\n  message: yup.string().required(\"⚠ This field is required\"),\r\n});\r\n\r\ninterface IFormInputs {\r\n  fullName: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst ContactsForm = () => {\r\n  const [modalShow, setModalShow] = useState<boolean>(false);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<IFormInputs>({ resolver: yupResolver(schema) });\r\n  const onSubmit = (data: IFormInputs) => setModalShow(true);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)} className={style.contactsForm}>\r\n      <label className={style.formLabel}>\r\n        Full Name\r\n        <input {...register(\"fullName\")} className={style.formInput} />\r\n        <p className={style.formErrorMessage}>{errors.fullName?.message ? errors.fullName?.message : \" \"}</p>\r\n      </label>\r\n      <label className={style.formLabel}>\r\n        Email\r\n        <input {...register(\"email\")} className={style.formInput} />\r\n        <p className={style.formErrorMessage}>{errors.email?.message ? errors.email?.message : \" \"}</p>\r\n      </label>\r\n      <label className={style.formLabel}>\r\n        Message\r\n        <textarea {...register(\"message\")} className={style.formTextarea} />\r\n        <p className={style.formErrorMessage}>{errors.message?.message ? errors.message.message : \" \"}</p>\r\n      </label>\r\n      <SendButton type=\"submit\" variant=\"outlined\" className={style.formButton}>\r\n        Send\r\n      </SendButton>\r\n    <Modal modalShow={modalShow} setModalShow={setModalShow}>\r\n      <h1 className={style.modalTitle}>Thank you for getting in touch!</h1>\r\n      <p className={style.modalText}>\r\n        We have received your message and would like to thank you for writing\r\n        to us. We will reply by email as soon as possible.\r\n      </p>\r\n    </Modal>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactsForm;\r\n","import style from \"./Contacts.module.scss\";\r\nimport ContactsForm from \"./ContactsForm\";\r\n\r\nconst Contacts = () => {\r\n  return (\r\n    <section className={style.contacts}>\r\n      <h1 className={style.heading}>Any questions?</h1>\r\n      <div className={style.formImg}>\r\n        <div className={style.image}></div>\r\n        <ContactsForm />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n"],"names":["schema","yup","fullName","required","email","message","useState","modalShow","setModalShow","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","onSubmit","data","className","style","type","variant","Modal"],"sourceRoot":""}